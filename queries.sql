USE product_sales_ordres;

select *
from customers;

select *
from employees;

select *
from offices;

select *
from orderdetails;

select *
from orders;

select *
from payments;

select * 
from productlines;

select *
from products;

-- ðŸŸ¢ BASIC SQL ANALYSIS

-- List all customers and their sales representatives.

select c.customerName,concat(e.firstname," ",e.lastname) as sales_reps
from customers as c join employees as e 
on c.salesrepEmployeenumber=e.employeenumber;

-- Retrieve all orders with status = 'Shipped'.

select * 
from orders
where status="shipped";

-- List all products in stock, sorted by quantity.

select * 
from products
where quantityinstock is not null
order by quantityinstock;

-- Get the full name and phone number of each customer.

select customername,phone
from customers;

-- Find all employees working in the San Francisco office.

select e.*,o.city
from employees as e join offices as o
on e.officecode=o.officecode
where city="san francisco";

-- ðŸŸ¡ INTERMEDIATE ANALYSIS

-- Total number of orders per customer.

select c.customernumber,c.customername,count(ordernumber) as per_customer_order
from orders as o join customers as c
on o.customernumber=c.customernumber
group by c.customernumber;

-- Top 5 customers by total payment amount.

select c.customernumber,sum(amount) as total_customer_payment
from payments as p left join customers as c 
on p.customernumber=c.customernumber
group by c.customernumber
order by total_customer_payment desc
limit 5;

-- Revenue per product line.

select pl.productline,sum(buyprice*quantityinstock) as revenue
from products as p left join productlines as pl
on p.productline=pl.productline
group by pl.productline;


-- List all orders placed in a specific year (e.g., 2003).

select *,extract(year from orderdate)
from orders
where year(orderdate)=2003;

-- Show the average payment amount per customer.

select c.customernumber,avg(amount) avg_amount
from payments as p left join customers as c 
on p.customernumber=c.customernumber
group by c.customernumber;

-- Count the number of employees per office.

select officecode,count(*)
from employees
group by officecode;


-- Find customers who havenâ€™t made any payments.

select *
from customers 
where customernumber not in(select distinct customernumber from payments);


-- Display orders with more than 20 products.

select ordernumber,count(productcode) as products
from orderdetails
group by ordernumber
having products>5;

select *
from orderdetails;

-- Find products with no orders.

select productcode,productname
from products 
where productcode not in(select productcode
from orderdetails);

-- Identify all products that are low on stock (<500 units).

select *
from products
where quantityinstock<500;

-- ðŸ”µ ADVANCED BUSINESS ANALYSIS

-- Calculate total revenue per month (monthly sales report).
	
select extract(month from paymentdate) as month ,sum(amount) as revenue
from payments
group by month
order by month;

-- List the top-selling products (by quantity).

select o.productcode,p.productname,sum(o.quantityordered) as Quantity
from orderdetails as o left join products as p
on p.productcode=o.productcode
group by o.productcode
order by Quantity desc;

-- Find the best performing sales rep by revenue.

select c.salesrepemployeenumber,concat(firstname," ",lastname) as name,sum(p.amount) as revenue
from customers as c left join payments as p
on p.customernumber=c.customernumber left join employees as e
on c.salesrepemployeenumber=e.employeenumber 
group by c.salesrepemployeenumber
order by revenue desc;

-- Revenue generated by each office.
CREATE VIEW p_c_e_o AS
SELECT 
    p.customerNumber,
    p.checkNumber,
    p.paymentDate,
    p.amount,
    c.customerName,
    c.contactLastName,
    c.contactFirstName,
    e.employeeNumber,
    e.firstName AS employeeFirstName,
    e.lastName AS employeeLastName,
    o.officeCode,
    o.city AS officeCity,
    o.country AS officeCountry
FROM payments AS p
LEFT JOIN customers AS c
    ON p.customerNumber = c.customerNumber
LEFT JOIN employees AS e
    ON e.employeeNumber = c.salesRepEmployeeNumber
LEFT JOIN offices AS o
    ON e.officeCode = o.officeCode;


select officecode,officecity,sum(amount) as revenue
from p_c_e_o
group by officecode
order by revenue desc;

-- Customers with late payments.

select distinct p.customernumber,p.customername
from p_c_e_o as p join orders as o
on o.customernumber=p.customernumber
where o.orderdate<p.paymentdate;


-- Average delivery time (Order vs Shipped Date).

select avg(datediff(orderdate,shippeddate)) as delivary_time_in_days
from orders;

-- Find duplicate customer entries based on name/email.

select customername,count(*) as Duplicate_Customer
from customers
group by customername
having Duplicate_Customer>1;


-- ðŸŸ£ COMPLEX SQL JOINS & SUBQUERIES

-- Orders with the highest total value.

select o.ordernumber,sum(o.quantityordered*o.priceeach) as total_value
from orders as p join orderdetails as o
on o.ordernumber=p.ordernumber
group by o.ordernumber
order by total_value desc;

-- Which office handles the most revenue?

select officecode,officecity,sum(amount) as revenue
from p_c_e_o
group by officecode
order by revenue desc;

-- Compare revenue of two or more product lines.

select pd.productline,sum(quantityinstock * buyprice) as revenue
from products as p left join productlines as pd
on p.productline=pd.productline
group by pd.productline
order by revenue desc;


-- List all customers who ordered more than one type of product line.

select od.customernumber,count(distinct pd.productline) as product_line
from products as p left join productlines as pd
on p.productline=pd.productline join orderdetails as o
on o.productcode=p.productcode left join orders as od
on od.ordernumber=o.ordernumber
group by od.customernumber
having  product_line>1;


-- display the customer who orders more than one 

select c.customernumber,count(p.ordernumber) as no_of_orders
from orders as p join customers as c
on c.customernumber=p.customernumber
group by c.customernumber
having no_of_orders>1;

-- Identify customers who placed orders but never paid.

select customernumber
from orders 
where customernumber not in (select distinct customernumber
from payments
where paymentdate is not null);

-- List employees who donâ€™t manage any other employees.

select *
from employees
where reportsto is null ;

-- Compare payments made vs orders placed for each customer.

select c.customernumber,count(o.ordernumber),count(p.checknumber)
from customers as c join payments as p
on p.customernumber=c.customernumber join orders as o
on c.customernumber=o.customernumber
group by c.customernumber;


-- ðŸ”¶ WINDOW FUNCTIONS / RANKING (if supported in your MySQL version)

-- Rank customers by payment amount.

select *,rank() over (order by total_amount desc)
from(select c.customernumber,sum(p.amount) as total_amount
from payments as p left join customers as c 
on c.customernumber=p.customernumber
group by c.customernumber
) as x;


-- Running total of revenue over time.

SELECT paymentDate, amount,
       SUM(amount) OVER (ORDER BY paymentDate) AS running_total
FROM payments;

-- Customer retention rate per quarter.

select quarter(orderdate) as quater,count(distinct customernumber) as retention_reate
from orders
group by quater;


-- Identify repeat customers (more than 3 order).

select customernumber,count(ordernumber) as orders
from orders
group by customernumber
having orders>3;

-- ðŸ”º AGGREGATIONS & KPIs

-- Total sales, average order size, and number of orders.

select sum(quantityordered * priceEach) as total_sales,avg(quantityordered* priceEach) as avg_qty,count(o.ordernumber) as no_of_orders
from orderdetails  as od left join orders as o
on od.ordernumber=o.ordernumber;

-- Profit margin by product (if cost is available).

select p.productname,sum(o.quantityordered * (o.priceeach-p.buyprice)) as profit
from products as p join orderdetails as o
on p.productcode=o.productcode
group by p.productname;


-- Number of orders per status (Shipped, On Hold, etc.).

select status,count(*) as total_orders
from orders
group by status;

-- Total number of unique products sold.

select count(distinct ordernumber) as products
from orderdetails;

